The ressortindexwriter creates index-files to realise ressort-overviews for a specific month

>>> from zeit.care.ressortindex import Ressortindexmanipulator
>>> Ressortindexmanipulator
<class 'zeit.care.ressortindex.Ressortindexmanipulator'>

We import our mockconnector module

>>> import zeit.connector.mock
>>> mockconnector = zeit.connector.mock.Connector()
>>> mockconnector
<zeit.connector.mock.Connector object at 0x...>

Build a ressort list

>>> ressortlist = Ressortindexmanipulator().convert_ressortxmlfile_to_list()
>>> ressortlist
['politik', 'politik/deutschland', ...

Build resource ids to be rewritten. We need 'year','volume' and ressort

>>> ids = Ressortindexmanipulator().get_ids()
>>> ids
[['http://xml.zeit.de/politik/2010-01/index', '2010', '01', 'politik'],...

The XML template which is used to fill in data.

>>> xml = Ressortindexmanipulator().read_index_template_file()
>>> xml
'<?xml ...

Get XML for the first id

>>> Ressortindexmanipulator().write_new_xml_from_template(xml,ids[0])
<zeit.connector.resource.Resource ...


Put the written XMLs in connector

>>> Ressortindexmanipulator().put_xml_from_ids(mockconnector)
<zeit.connector.mock.Connector ...

####################################################################################
Do we get XML with the correct values depending on the path (e.g. digital/2011-03)? 
####################################################################################
>>> from lxml import etree
>>> import StringIO, os
>>> rid = 'http://xml.zeit.de/digital/2011-03/index'
>>> res = mockconnector[rid]
>>> xml = res.data.read()

Did we create a centerpage property for a given resource?

>>> res.type
'centerpage'

Is there an output for the resource?
>>> print(xml)
<?xml ...

The concrete values:
>>> tree = etree.parse(StringIO.StringIO(xml))
>>> attr_date_first_released = tree.xpath('//attribute[@name="date_first_released" and  @ns="http://namespaces.zeit.de/CMS/document"]')[0]
>>> print(etree.tostring(attr_date_first_released, method="text", encoding=unicode))
2011-03-01T00:00:00.000001+00:00
...


Does the property have the same value?
>>> res.properties[('http://namespaces.zeit.de/CMS/document','date_first_released')]
'2011-03-01T00:00:00.000001+00:00'

>>> attr_ressort = tree.xpath('//attribute[@name="ressort" and  @ns="http://namespaces.zeit.de/CMS/document"]')[0]
>>> print(etree.tostring(attr_ressort, method="text", encoding="UTF-8"))
Digital...
...

Does the property have the same value?
>>> res.properties[('http://namespaces.zeit.de/CMS/document','ressort')]
'Digital'

>>> attr_year = tree.xpath('//attribute[@name="year" and @ns="http://namespaces.zeit.de/CMS/document"]')[0]
>>> print(etree.tostring(attr_year, method="text", encoding="UTF-8"))
2011
...

Does the property have the same value?
>>> res.properties[('http://namespaces.zeit.de/CMS/document','year')]
'2011'

>>> bodytitle = tree.xpath('//body/title')[0]
>>> print(etree.tostring(bodytitle, method="text", encoding="UTF-8"))
Artikel und Nachrichten im März 2011 aus dem Ressort Digital | ZEIT ONLINE
...

>>> teasertitle = tree.xpath('//teaser/title')[0]
>>> print(etree.tostring(teasertitle, method="text", encoding="UTF-8"))
Artikel und Nachrichten im März 2011 aus dem Ressort Digital | ZEIT ONLINE
...

>>> teasertext = tree.xpath('//teaser/text')[0]
>>> print(etree.tostring(teasertext, method="text", encoding="UTF-8"))
Lesen Sie alle Artikel und Nachrichten vom März 2011 aus dem Ressort Digital auf ZEIT ONLINE
...
