The ressortindexwriter creates index-files to realise ressort-overviews for a specific month

>>> from zeit.care.ressortindex import Ressortindexmanipulator
>>> Ressortindexmanipulator
<class 'zeit.care.ressortindex.Ressortindexmanipulator'>

We import our mockconnector module

>>> import zeit.connector.mock
>>> mockconnector = zeit.connector.mock.Connector()
>>> mockconnector
<zeit.connector.mock.Connector object at 0x...>

Build a ressort list

>>> ressortlist = Ressortindexmanipulator().convert_ressortxmlfile_to_list()
>>> ressortlist
['politik', 'politik/deutschland', ...

Build resource ids to be rewritten. We need 'year','volume' and ressort

>>> indexwriter = Ressortindexmanipulator()
>>> indexwriter.start_id='http://xml.zeit.de'
>>> ids = indexwriter.get_ids()
>>> ids
[['http://xml.zeit.de/politik/2009-09/index', '2009', '09', 'politik'],...

The XML template which is used to fill in data.

>>> xml = Ressortindexmanipulator().read_index_template_file()
>>> xml
'<?xml ...

Get XML for the first id

>>> Ressortindexmanipulator().write_new_xml_from_template(xml,ids[0])
<zeit.connector.resource.Resource ...


Put the written XMLs in connector

>>> Ressortindexmanipulator().put_xml_from_ids(mockconnector)
<zeit.connector.mock.Connector ...

####################################################################################
Do we get XML with the correct values depending on the path (e.g. digital/2011-03)? 
####################################################################################
>>> from lxml import etree
>>> import StringIO, os


First test: path WITH Subressort 
================================
>>> rid = 'http://xml.zeit.de/politik/deutschland/2011-03/index'
>>> res = mockconnector[rid]
>>> xml = res.data.read()
>>> tree = etree.parse(StringIO.StringIO(xml))

Did we create a centerpage property for a given resource?

>>> res.type
'centerpage'

Is there an output for the resource?
>>> print(xml)
<?xml ...

The concrete values:
>>> attr_date_first_released = tree.xpath('//attribute[@name="date_first_released" and  @ns="http://namespaces.zeit.de/CMS/document"]')[0]
>>> print(etree.tostring(attr_date_first_released, method="text", encoding=unicode))
2011-03-01T00:00:00.000001+00:00
...

Does the property have the same value?

>>> res.properties[('date_first_released','http://namespaces.zeit.de/CMS/document')]
'2011-03-01T00:00:00.000001+00:00'

>>> attr_ressort = tree.xpath('//attribute[@name="ressort" and  @ns="http://namespaces.zeit.de/CMS/document"]')[0]
>>> print(etree.tostring(attr_ressort, method="text", encoding="UTF-8"))
Politik...
...

>>> attr_subressort = tree.xpath('//attribute[@name="sub_ressort" and  @ns="http://namespaces.zeit.de/CMS/document"]')[0]
>>> print(etree.tostring(attr_subressort, method="text", encoding="UTF-8"))
Deutschland...
...

Does the property have the same value?
>>> res.properties[('ressort','http://namespaces.zeit.de/CMS/document')]
'Politik'

Does the property have the same value?
>>> res.properties[('sub_ressort','http://namespaces.zeit.de/CMS/document')]
'Deutschland'

>>> attr_year = tree.xpath('//attribute[@name="year" and @ns="http://namespaces.zeit.de/CMS/document"]')[0]
>>> print(etree.tostring(attr_year, method="text", encoding="UTF-8"))
2011
...

Does the property have the same value?
>>> res.properties[('year','http://namespaces.zeit.de/CMS/document')]
'2011'

>>> bodytitle = tree.xpath('//body/title')[0]
>>> print(etree.tostring(bodytitle, method="text", encoding="UTF-8"))
Artikel und Nachrichten im März 2011 aus dem Ressort Deutschland | ZEIT ONLINE
...

>>> teasertitle = tree.xpath('//teaser/title')[0]
>>> print(etree.tostring(teasertitle, method="text", encoding="UTF-8"))
Artikel und Nachrichten im März 2011 aus dem Ressort Deutschland | ZEIT ONLINE
...

>>> teasertext = tree.xpath('//teaser/text')[0]
>>> print(etree.tostring(teasertext, method="text", encoding="UTF-8"))
Lesen Sie alle Artikel und Nachrichten vom März 2011 aus dem Ressort Deutschland auf ZEIT ONLINE
...


2n test: path WITHOUT Subressort 
================================
>>> rid = 'http://xml.zeit.de/politik/2011-03/index'
>>> res = mockconnector[rid]
>>> xml = res.data.read()
>>> tree = etree.parse(StringIO.StringIO(xml))

Does the property have the same value?
>>> res.properties[('ressort','http://namespaces.zeit.de/CMS/document')]
'Politik'

>>> bodytitle = tree.xpath('//body/title')[0]
>>> print(etree.tostring(bodytitle, method="text", encoding="UTF-8"))
Artikel und Nachrichten im März 2011 aus dem Ressort Politik | ZEIT ONLINE
...

>>> teasertitle = tree.xpath('//teaser/title')[0]
>>> print(etree.tostring(teasertitle, method="text", encoding="UTF-8"))
Artikel und Nachrichten im März 2011 aus dem Ressort Politik | ZEIT ONLINE
...

>>> teasertext = tree.xpath('//teaser/text')[0]
>>> print(etree.tostring(teasertext, method="text", encoding="UTF-8"))
Lesen Sie alle Artikel und Nachrichten vom März 2011 aus dem Ressort Politik auf ZEIT ONLINE
...

In this case there should not be values for the subressort property and attribute

Does the property have the same value?
>>> prop = ('sub_essort','http://namespaces.zeit.de/CMS/document')
>>> prop in res.properties.keys()
False

>>> attr_subressort = tree.xpath('//attribute[@name="sub_ressort" and  @ns="http://namespaces.zeit.de/CMS/document"]')
>>> len(attr_subressort)
0
